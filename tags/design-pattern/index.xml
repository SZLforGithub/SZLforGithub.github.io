<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>design pattern on Louis&#39;s blog</title>
    <link>https://szlforgithub.github.io/tags/design-pattern/</link>
    <description>Recent content in design pattern on Louis&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 26 Jul 2020 14:15:24 +0800</lastBuildDate>
    
	<atom:link href="https://szlforgithub.github.io/tags/design-pattern/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Singleton pattern (單例模式) for PHP</title>
      <link>https://szlforgithub.github.io/post/singletonphp/</link>
      <pubDate>Sun, 26 Jul 2020 14:15:24 +0800</pubDate>
      
      <guid>https://szlforgithub.github.io/post/singletonphp/</guid>
      <description>什麼是單例模式 單例模式是一種 design pattern，要求一個 Class 只能有一個實例，通常會使用在系統中需要一個全局物件的情況。
在實作時的邏輯就是：「一個 Class 只能有一個儲存自身實例化的靜態變數 $instance 、和一個獲得這個變數的靜態方法 getInstance() 」 實際在使用時會 call getInstance() 這個靜態方法，他會檢查 $instance 是否為空，若不為空則回傳，若為空則實例化 Class 賦予 $instance 並回傳。</description>
    </item>
    
  </channel>
</rss>