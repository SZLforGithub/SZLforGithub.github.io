<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Louis的共筆部落格 on Louis&#39;s blog</title>
    <link>https://szlforgithub.github.io/</link>
    <description>Recent content in Louis的共筆部落格 on Louis&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 26 Jul 2020 14:15:24 +0800</lastBuildDate>
    
	<atom:link href="https://szlforgithub.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Singleton pattern (單例模式) for PHP</title>
      <link>https://szlforgithub.github.io/post/singletonphp/</link>
      <pubDate>Sun, 26 Jul 2020 14:15:24 +0800</pubDate>
      
      <guid>https://szlforgithub.github.io/post/singletonphp/</guid>
      <description>什麼是單例模式 單例模式是一種 design pattern，要求一個 Class 只能有一個實例，通常會使用在系統中需要一個全局物件的情況。
在實作時的邏輯就是：「一個 Class 只能有一個儲存自身實例化的靜態變數 $instance 、和一個獲得這個變數的靜態方法 getInstance() 」 實際在使用時會 call getInstance() 這個靜態方法，他會檢查 $instance 是否為空，若不為空則回傳，若為空則實例化 Class 賦予 $instance 並回傳。</description>
    </item>
    
    <item>
      <title>Laravel Conf Taiwan - Less is More 參加心得</title>
      <link>https://szlforgithub.github.io/post/laravelconf2020/</link>
      <pubDate>Sun, 26 Jul 2020 13:18:23 +0800</pubDate>
      
      <guid>https://szlforgithub.github.io/post/laravelconf2020/</guid>
      <description>Laravel Conf 是目前台灣最大的 Laravel 社群。在疫情影響下仍然如期舉辦，今年是第四屆的 Laravel Conf。
要起飛了！快速了解 PHP 8 大進化 在令人驚豔的 PHP7 發布後的五年，PHP8 即將發佈，他會帶給我們更多驚喜嗎？</description>
    </item>
    
    <item>
      <title>Git 簡單介紹與常用指令</title>
      <link>https://szlforgithub.github.io/post/git/</link>
      <pubDate>Sat, 13 Jun 2020 16:24:11 +0800</pubDate>
      
      <guid>https://szlforgithub.github.io/post/git/</guid>
      <description>什麼是 Git？ Git 是一種分散式版本控制系統。
版本控制系統？ 未導入版本控制系統之前，我們對專案進行修改或整合時，必須耗費大量的人力來對程式碼做備份和比對的工作。這在專案規模逐漸擴大或是多人協作的場景時，每個人的程式碼進度不一，哪段程式碼被修改或覆蓋？這段程式碼和上一次的版本有什麼不同？導致程式碼混亂不堪，難以維護，而版本控制系統就是要解決這樣的問題。
分散式？ 版本控制主要分為集中式(Centralized Version Control Systems，CVCSs)和分散式(Distributed Version Control Systems, DVCSs)兩種，前者如 SVN，後者如 Git。</description>
    </item>
    
    <item>
      <title>Composer 介紹與使用</title>
      <link>https://szlforgithub.github.io/post/composer/</link>
      <pubDate>Sun, 07 Jun 2020 19:33:01 +0800</pubDate>
      
      <guid>https://szlforgithub.github.io/post/composer/</guid>
      <description>什麼是 Composer？ Composer 是 PHP 用來管理套件的工具，是現代 PHPer 必備的武器之一。
為什麼我們需要 Composer？ 在沒有使用 Composer 的情況下，每使用一個套件就必須 include 一次，套件又可能相依其他套件，於是我們又要再 include 那個套件。</description>
    </item>
    
    <item>
      <title>使用 PHP 獲取使用者 IP 以及漏洞分析</title>
      <link>https://szlforgithub.github.io/post/php_ip/</link>
      <pubDate>Sat, 06 Jun 2020 18:21:38 +0800</pubDate>
      
      <guid>https://szlforgithub.github.io/post/php_ip/</guid>
      <description>工作上有這樣的需求，需要在使用者訪問網站之後獲取 IP 並儲存，花了一些時間研究，也發現很多有趣的地方，特地記錄下來。
市面上常見的方法 其實要得到使用者 IP 這件事情本身不難，拿磚頭往大學資工系隨便砸，砸到的那個學生應該都有辦法回答這個問題，以 PHP 來說不外乎是去讀取 $_SERVER 這個預定義變數，包含了一大堆的參數可以對應到不同的值，這些值可能有可能沒有，有些可以偽造有些無法偽造。</description>
    </item>
    
  </channel>
</rss>